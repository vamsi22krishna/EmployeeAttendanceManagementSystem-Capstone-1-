package com.attendencemanagementsystem.serviceImpl;

import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.attendencemanagementsystem.dto.LeaveRequestDto;
import com.attendencemanagementsystem.entity.LeaveBalance;
import com.attendencemanagementsystem.entity.LeaveRequest;
import com.attendencemanagementsystem.entity.LeaveTypes;
import com.attendencemanagementsystem.entity.UserLogin;
import com.attendencemanagementsystem.exception.ResourceNotFoundException;
import com.attendencemanagementsystem.repository.LeaveBalanceRepository;
import com.attendencemanagementsystem.repository.LeaveRequestRepository;
import com.attendencemanagementsystem.repository.LeaveTypesRepository;
import com.attendencemanagementsystem.repository.UserLoginRepository;
import com.attendencemanagementsystem.service.LeaveRequestService;

@Service
//@Transactional
public class LeaveRequestServiceImpl implements LeaveRequestService {

	@Autowired
	private LeaveRequestRepository leaveRequestRepository;
	
	 @Autowired
	    private LeaveTypesRepository leaveTypesRepository;

	@Autowired
	private ModelMapper modelMapper;
	
	
	 @Autowired
	    private LeaveBalanceRepository leaveBalanceRepository;
	 
	 @Autowired
	    private UserLoginRepository userLoginRepository;
	 

//	    public LeaveRequestDto submitLeaveRequest(LeaveRequestDto leaveRequestDto) {
//	        UserLogin userLogin = userLoginRepository.findById(leaveRequestDto.getLoginId())
//	                .orElseThrow(() -> new RuntimeException("User not found"));
//
//	        LeaveRequest leaveRequest = new LeaveRequest();
//	        leaveRequest.setUserLogin(userLogin);
//	        leaveRequest.setLeaveType(new LeaveTypes(leaveRequestDto.getLeaveTypeId())); // Assuming LeaveTypes entity exists
//	        
//	        leaveRequest.setStartDate(leaveRequestDto.getStartDate());
//	        leaveRequest.setEndDate(leaveRequestDto.getEndDate());
//	   //     leaveRequest.setHalfDay(leaveRequestDto.getHalfDay());
//	        leaveRequest.setReason(leaveRequestDto.getReason());
//	        leaveRequest.setStatus("Pending");
//
//	        LeaveRequest savedLeaveRequest = leaveRequestRepository.save(leaveRequest);
//	        return convertToDto(savedLeaveRequest);
//	    }
	 public LeaveRequest submitLeaveRequest(LeaveRequestDto leaveRequestDTO, String loginId) {
	        UserLogin userLogin = userLoginRepository.findById(loginId)
	                .orElseThrow(() -> new ResourceNotFoundException("User not found"));

	        LeaveTypes leaveType = leaveTypesRepository.findById(leaveRequestDTO.getLeaveTypeId())
	                .orElseThrow(() -> new ResourceNotFoundException("Leave type not found"));

	        LeaveBalance leaveBalance = leaveBalanceRepository.findByUserLoginAndLeaveType(userLogin, leaveType)
	                .orElseThrow(() -> new ResourceNotFoundException("Leave balance not found"));
	        
	        LeaveRequest leaveRequest = new LeaveRequest();
	        leaveRequest.setUserLogin(userLogin);
	        leaveRequest.setLeaveType(leaveType);
	        leaveRequest.setStartDate(leaveRequestDTO.getStartDate());
	        leaveRequest.setEndDate(leaveRequestDTO.getEndDate());
	        leaveRequest.setStartSession(leaveRequestDTO.getStartSession());
	        leaveRequest.setEndSession(leaveRequestDTO.getEndSession());
	        leaveRequest.setReason(leaveRequestDTO.getReason());
	        leaveRequest.setStatus(leaveRequestDTO.getStatus() != null ? leaveRequestDTO.getStatus() : "Pending");

//	        leaveRequest.prePersistAndUpdate(); // Generate ID and calculate number of leaves
//	        if (leaveRequest.getNumberOfLeaves() > (leaveBalance.getTotalLeaves() - leaveBalance.getUsedLeaves())) {
//	            throw new RuntimeException("Not enough leave balance");
//	        }
//	        System.out.println("==============================================");
//	        System.out.println(leaveRequest.getLeaveId());
	        double numberOfLeaves = calculateNumberOfLeaves(
	                leaveRequestDTO.getStartDate(),
	                leaveRequestDTO.getEndDate(),
	                leaveRequestDTO.getStartSession(),
	                leaveRequestDTO.getEndSession()
	        );
	        leaveRequest.setNumberOfLeaves(numberOfLeaves);

	        if (numberOfLeaves > (leaveBalance.getTotalLeaves() - leaveBalance.getUsedLeaves())) {
	            throw new RuntimeException("Not enough leave balance");
	        }
	        return leaveRequestRepository.save(leaveRequest);
	    }
	
	    public List<LeaveRequestDto> getLeaveRequestsByUser(String loginId) {
	        List<LeaveRequest> leaveRequests = leaveRequestRepository.findByUserLogin_LoginId(loginId);
	        return leaveRequests.stream().map(this::convertToDto).collect(Collectors.toList());
	    }

	    public List<LeaveRequestDto> getLeaveRequestsByManager(String managerId) {
	        List<LeaveRequest> leaveRequests = leaveRequestRepository.findByUserLogin_Manager_UserId(managerId);
	        return leaveRequests.stream().map(this::convertToDto).collect(Collectors.toList());
	    }

//	    public LeaveRequestDto approveLeaveRequest(String leaveId) {
//	        LeaveRequest leaveRequest = leaveRequestRepository.findById(leaveId)
//	                .orElseThrow(() -> new RuntimeException("Leave request not found"));
//	        leaveRequest.setStatus("Approved");
//	        LeaveRequest updatedLeaveRequest = leaveRequestRepository.save(leaveRequest);
//	        return convertToDto(updatedLeaveRequest);
//	    }
	    public LeaveRequest approveLeaveRequest(String leaveId) {
	        // Fetch the leave request from the repository
	        LeaveRequest leaveRequest = leaveRequestRepository.findById(leaveId)
	                .orElseThrow(() -> new ResourceNotFoundException("Leave request not found"));

	        // Log the initial state
	        System.out.println("+=========================================================");
	        System.out.println("Leave Request before approval: " + leaveRequest.getLeaveId());

	        // Update the status of the leave request
	        leaveRequest.setStatus("Approved");
	        leaveRequestRepository.save(leaveRequest); // Save updated leave request

	        // Retrieve the corresponding leave balance
	        LeaveBalance leaveBalance = leaveBalanceRepository.findByUserLoginAndLeaveType(
	                leaveRequest.getUserLogin(), leaveRequest.getLeaveType())
	                .orElseThrow(() -> new ResourceNotFoundException("Leave balance not found"));

	        // Log the leave balance before updating
	        System.out.println("+=========================================================");
	        System.out.println("Leave Balance before update: " + leaveBalance.getUsedLeaves());

	        // Update the used leaves
	        leaveBalance.setUsedLeaves(leaveBalance.getUsedLeaves() + leaveRequest.getNumberOfLeaves());
	        System.out.println("+=========================================================");
	        // Log the updated leaves
	        System.out.println("Updated Used Leaves: " + leaveBalance.getUsedLeaves());

	        
	        
	        
	        
	        // Save the updated leave balance
	        leaveBalanceRepository.save(leaveBalance);

	        return leaveRequest; // Return the approved leave request
	    }
	    private void setUserLeaves(UserLogin userLogin, LeaveTypes leaveType, int numberOfLeaves) {
	       
	    }
//	    public LeaveRequestDto rejectLeaveRequest(String leaveId) {
//	        LeaveRequest leaveRequest = leaveRequestRepository.findById(leaveId)
//	                .orElseThrow(() -> new RuntimeException("Leave request not found"));
//	        leaveRequest.setStatus("Rejected");
//	        LeaveRequest updatedLeaveRequest = leaveRequestRepository.save(leaveRequest);
//	        return convertToDto(updatedLeaveRequest);
//	    }
	    public void rejectLeaveRequest(String leaveId) {
	        LeaveRequest leaveRequest = leaveRequestRepository.findById(leaveId)
	                .orElseThrow(() -> new RuntimeException("Leave request not found"));
	        leaveRequest.setStatus("Rejected");
	        leaveRequestRepository.save(leaveRequest);
	    }
	       

	    private LeaveRequestDto convertToDto(LeaveRequest leaveRequest) {
	        LeaveRequestDto dto = new LeaveRequestDto();
	        dto.setLeaveId(leaveRequest.getLeaveId());
	        dto.setLoginId(leaveRequest.getUserLogin().getLoginId());
	        dto.setLeaveTypeId(leaveRequest.getLeaveType().getLeaveTypeId());
	        dto.setStartDate(leaveRequest.getStartDate());
	        dto.setEndDate(leaveRequest.getEndDate());
	       // dto.setHalfDay(leaveRequest.getHalfDay());
	        dto.setReason(leaveRequest.getReason());
	        dto.setStatus(leaveRequest.getStatus());
	        dto.setFirstName(leaveRequest.getUserLogin().getUserInfo().getFirstName());
	        dto.setLastName(leaveRequest.getUserLogin().getUserInfo().getLastName());
	        dto.setNumberOfLeaves(leaveRequest.getNumberOfLeaves());
	        dto.setLeaveTypeName(leaveRequest.getLeaveType().getLeaveType());
	        System.out.println(leaveRequest.getStatus());
	      
	        return dto;
	    }
	@Override
	public LeaveRequestDto createLeaveRequest(LeaveRequestDto leaveRequestDto) {
		LeaveRequest leaveRequest = modelMapper.map(leaveRequestDto, LeaveRequest.class);
		leaveRequest = leaveRequestRepository.save(leaveRequest);
		return modelMapper.map(leaveRequest, LeaveRequestDto.class);
	}

	@Override
	public LeaveRequestDto getLeaveRequestById(String leaveId) {
		LeaveRequest leaveRequest = leaveRequestRepository.findById(leaveId)
				.orElseThrow(() -> new ResourceNotFoundException("Leave request not found with id: " + leaveId));
		return modelMapper.map(leaveRequest, LeaveRequestDto.class);
	}

	@Override
	public LeaveRequestDto updateLeaveRequest(String leaveId, LeaveRequestDto leaveRequestDto) {
		LeaveRequest existingLeaveRequest = leaveRequestRepository.findById(leaveId)
				.orElseThrow(() -> new ResourceNotFoundException("Leave request not found with id: " + leaveId));

		modelMapper.map(leaveRequestDto, existingLeaveRequest);
		existingLeaveRequest = leaveRequestRepository.save(existingLeaveRequest);
		return modelMapper.map(existingLeaveRequest, LeaveRequestDto.class);
	}

	@Override
	public void deleteLeaveRequest(String leaveId) {
		LeaveRequest leaveRequest = leaveRequestRepository.findById(leaveId)
				.orElseThrow(() -> new ResourceNotFoundException("Leave request not found with id: " + leaveId));
		leaveRequestRepository.delete(leaveRequest);
	}
	public List<LeaveRequestDto> getPendingLeaveRequestsByManager(String managerId) {
        List<LeaveRequest> leaveRequests = leaveRequestRepository.findByUserLogin_UserInfo_Manager_UserId(managerId);
        return leaveRequests.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }
	 public double calculateNumberOfLeaves(Timestamp startDate, Timestamp endDate, String startSession, String endSession) {
	        LocalDate start = startDate.toLocalDateTime().toLocalDate();
	        LocalDate end = endDate.toLocalDateTime().toLocalDate();
	        long diffInDays = ChronoUnit.DAYS.between(start, end);

	        if (start.equals(end)) {
	           
	            if ("First Half".equals(startSession) && "Second Half".equals(endSession)) {
	                return 1;
	            } else {
	                return 0.5;
	            }
	        } else {
	          
	            if ("First Half".equals(startSession) && "First Half".equals(endSession)) {
	                return diffInDays + 0.5;
	            } else if ("Second Half".equals(startSession) && "Second Half".equals(endSession)) {
	                return diffInDays + 0.5;
	            } else if ("Second Half".equals(startSession) && "First Half".equals(endSession)) {
	                return diffInDays;
	            } else if ("First Half".equals(startSession) && "Second Half".equals(endSession)) {
	                return diffInDays + 1;
	            } else {
	                return diffInDays + 1;
	            }
	        }
	    }
	
}
