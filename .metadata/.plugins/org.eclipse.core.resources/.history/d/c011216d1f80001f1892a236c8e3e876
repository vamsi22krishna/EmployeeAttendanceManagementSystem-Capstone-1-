package com.attendencemanagementsystem.serviceImpl;
import java.sql.Timestamp;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.attendencemanagementsystem.dto.AttendanceDto;
import com.attendencemanagementsystem.entity.Attendance;
import com.attendencemanagementsystem.entity.UserLogin;
import com.attendencemanagementsystem.exception.ResourceNotFoundException;
import com.attendencemanagementsystem.repository.AttendanceRepository;
import com.attendencemanagementsystem.repository.UserLoginRepository;
import com.attendencemanagementsystem.service.AttendanceService;

@Service
//@Transactional
public class AttendanceServiceImpl implements AttendanceService {

    @Autowired
    private AttendanceRepository attendanceRepository;
    
    @Autowired
    private UserLoginRepository userLoginRepository;

    @Autowired
    private ModelMapper modelMapper;

    @Override
    public AttendanceDto createAttendance(AttendanceDto attendanceDto) {
        Attendance attendance = modelMapper.map(attendanceDto, Attendance.class);
        attendance = attendanceRepository.save(attendance);
        return modelMapper.map(attendance, AttendanceDto.class);
    }

    @Override
    public AttendanceDto getAttendanceById(String attendanceId) {
        Attendance attendance = attendanceRepository.findById(attendanceId)
                .orElseThrow(() -> new ResourceNotFoundException("Attendance not found with id: " + attendanceId));
        return modelMapper.map(attendance, AttendanceDto.class);
    }

    @Override
    public AttendanceDto updateAttendance(String attendanceId, AttendanceDto attendanceDto) {
        Attendance existingAttendance = attendanceRepository.findById(attendanceId)
                .orElseThrow(() -> new ResourceNotFoundException("Attendance not found with id: " + attendanceId));
        
        modelMapper.map(attendanceDto, existingAttendance);
        existingAttendance = attendanceRepository.save(existingAttendance);
        return modelMapper.map(existingAttendance, AttendanceDto.class);
    }

    @Override
    public void deleteAttendance(String attendanceId) {
        Attendance attendance = attendanceRepository.findById(attendanceId)
                .orElseThrow(() -> new ResourceNotFoundException("Attendance not found with id: " + attendanceId));
        attendanceRepository.delete(attendance);
    }
    
    public AttendanceDto logCheckIn(String loginId) {
        UserLogin userLogin = userLoginRepository.findById(loginId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        Attendance attendance = new Attendance();
        attendance.setUserLogin(userLogin);
        attendance.setCheckIn(new Timestamp(System.currentTimeMillis()));
        attendance.setDate(new Timestamp(System.currentTimeMillis()));
        attendance.setStatus("Checked In");
        Attendance savedAttendance = attendanceRepository.save(attendance);
        return convertToDto(savedAttendance);
    }

//    public AttendanceDto logCheckOut(String loginId) {
//        UserLogin userLogin = userLoginRepository.findById(loginId)
//                .orElseThrow(() -> new RuntimeException("User not found"));
//
//        List<Attendance> attendances = attendanceRepository.findByUserLogin_LoginId(loginId);
//        Attendance attendance = attendances.stream()
//                .filter(a -> a.getCheckOut() == null)
//                .findFirst()
//                .orElseThrow(() -> new RuntimeException("No check-in record found for today."));
//        attendance.setCheckOut(new Timestamp(System.currentTimeMillis()));
////        attendance.setStatus("Checked Out");
//        long hoursWorked = (attendance.getCheckOut().getTime() - attendance.getCheckIn().getTime()) / (1000 * 60 * 60);
//        attendance.setStatus(hoursWorked >= 8 ? "P" : "A");
//        Attendance savedAttendance = attendanceRepository.save(attendance);
//        return convertToDto(savedAttendance);
//    }
    
    public AttendanceDto logCheckOut(String loginId) {
        Optional<UserLogin> userLoginOptional = userLoginRepository.findById(loginId);
        if (!userLoginOptional.isPresent()) {
            throw new RuntimeException("UserLogin not found");
        }
        UserLogin userLogin = userLoginOptional.get();

        List<Attendance> attendances = attendanceRepository.findByUserLoginAndStatus(loginId, "SignedIn");
        if (attendances.isEmpty()) {
            throw new RuntimeException("No sign-in record found for user");
        }

        Attendance attendance = attendances.get(0);
        attendance.setCheckOut(new Timestamp(System.currentTimeMillis()));
        attendance.setStatus("SignedOut");
        attendanceRepository.save(attendance);

        // Calculate total working hours for the day
        List<Attendance> dailyAttendances = attendanceRepository.findByUserLoginAndDate(userLogin, new Timestamp(System.currentTimeMillis()));
        long totalHoursWorked = dailyAttendances.stream()
            .filter(att -> att.getCheckIn() != null && att.getCheckOut() != null)
            .mapToLong(att -> (att.getCheckOut().getTime() - att.getCheckIn().getTime()) / (1000 * 60 * 60))
            .sum();

        // Update status based on total hours worked
        dailyAttendances.forEach(att -> {
            if (totalHoursWorked >= 8) {
                att.setStatus("P");
            } else {
                att.setStatus("A");
            }
            attendanceRepository.save(att);
        });

        return convertToDto(attendance);
    }
    public List<AttendanceDto> getAttendanceRecords(String loginId) {
        List<Attendance> attendances = attendanceRepository.findByUserLogin_LoginId(loginId);
        return attendances.stream().map(this::convertToDto).collect(Collectors.toList());
    }

    private AttendanceDto convertToDto(Attendance attendance) {
        AttendanceDto dto = new AttendanceDto();
        dto.setAttendanceId(attendance.getAttendanceId());
        dto.setLoginId(attendance.getUserLogin().getLoginId());
        dto.setCheckIn(attendance.getCheckIn());
        dto.setCheckOut(attendance.getCheckOut());
        dto.setDate(attendance.getDate());
        dto.setStatus(attendance.getStatus());
        return dto;
    }
    
    public List<AttendanceDto> getAttendanceByManager(String managerId) {
        List<String> employeeIds = userLoginRepository.findEmployeesByManagerId(managerId);
        return attendanceRepository.findByEmployeeIds(employeeIds).stream()
                .map(this::convertToDto1)
                .collect(Collectors.toList());
    }

    private AttendanceDto convertToDto1(Attendance attendance) {
        AttendanceDto dto = new AttendanceDto();
        dto.setEmployeeId(attendance.getUserLogin().getUserInfo().getUserId());
        
        dto.setDate(attendance.getDate());
        dto.setStatus(attendance.getStatus());
        // Add more fields as necessary
        return dto;
    }
}
